<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何在ASP.NET Core中使用Json Patch更新部分資料</title>
      <link href="/2023/08/08/dotnet-Json-Patch/"/>
      <url>/2023/08/08/dotnet-Json-Patch/</url>
      
        <content type="html"><![CDATA[<h1 id="Json-Patch介紹"><a href="#Json-Patch介紹" class="headerlink" title="Json Patch介紹"></a>Json Patch介紹</h1><p>根據<a href="https://datatracker.ietf.org/doc/html/rfc6902/">RFC 690</a> 標準定義的。JSON Patch 允許您指定如何修改 JSON 文檔，而無需傳送整個文檔，特別是在 RESTful API 中，用於局部更新資源而不是使用 PUT 或 POST 請求進行整個替換。這有助於減少傳輸量並提高效率，尤其在資源很大或頻繁更新時。</p><h2 id="範例程式"><a href="#範例程式" class="headerlink" title="範例程式"></a>範例程式</h2><p>ASP.NET Core Web API 中的 JsonPatch</p><blockquote><p>Github範例程式<br><a href="https://github.com/DeliaHung/dotnet-Json-Patch">https://github.com/DeliaHung/dotnet-Json-Patch</a></p></blockquote><h2 id="請求格式"><a href="#請求格式" class="headerlink" title="請求格式"></a>請求格式</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">    <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;replace&quot;</span><span class="punctuation">,</span> <span class="comment">//作業的類型。</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;/FirstName&quot;</span><span class="punctuation">,</span> <span class="comment">//指出要變更的元素。</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;hong&quot;</span> <span class="comment">//更新的值。</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>op 描述所需的更改。這些操作包括：</p><ul><li>add：在 JSON 文檔中添加新的項目。</li><li>remove：從 JSON 文檔中刪除現有的項目。</li><li>replace：替換 JSON 文檔中現有項目的值。</li><li>move：將一個項目移動到另一個位置。</li><li>copy：從一個位置複製一個項目到另一個位置。</li><li>test：測試 JSON 文檔的某個值是否等於指定的值。</li></ul><p>這些操作是按照順序應用的，如果有任何一個操作失敗, 整個patch都會被終止。</p><h2 id="套件安裝"><a href="#套件安裝" class="headerlink" title="套件安裝"></a>套件安裝</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PM&gt; Install-Package Microsoft.AspNetCore.JsonPatch</span><br></pre></td></tr></table></figure><h2 id="Program-cs註冊"><a href="#Program-cs註冊" class="headerlink" title="Program.cs註冊"></a>Program.cs註冊</h2><blockquote><p>System.Text.Json型輸入格式器不支援轉換，需要使用 NewtonsoftJson</p></blockquote><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddControllers()</span><br><span class="line">    .AddNewtonsoftJson();<span class="comment">//加入AddNewtonsoftJson</span></span><br></pre></td></tr></table></figure><blockquote><p>若要保持其他請求使用System.Text.Json，範例如下。</p></blockquote><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddControllers(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.InputFormatters.Insert(<span class="number">0</span>, MyJPIF.GetJsonPatchInputFormatter());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyJPIF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NewtonsoftJsonPatchInputFormatter <span class="title">GetJsonPatchInputFormatter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> builder = <span class="keyword">new</span> ServiceCollection()</span><br><span class="line">            .AddLogging()</span><br><span class="line">            .AddMvc()</span><br><span class="line">            .AddNewtonsoftJson()</span><br><span class="line">            .Services.BuildServiceProvider();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">            .GetRequiredService&lt;IOptions&lt;MvcOptions&gt;&gt;()</span><br><span class="line">            .Value</span><br><span class="line">            .InputFormatters</span><br><span class="line">            .OfType&lt;NewtonsoftJsonPatchInputFormatter&gt;()</span><br><span class="line">            .First();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>NewtonsoftJsonPatchInputFormatter 處理 JSON Patch 請求。</li><li>現有的 System.Text.Json 型輸入與格式器會處理所有其他 JSON 請求和回應。</li></ul><h2 id="範例物件"><a href="#範例物件" class="headerlink" title="範例物件"></a>範例物件</h2><blockquote><p>用使用者及送貨地址為例，一個User包含多個送貨地址、多個Email。</p></blockquote><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime? Birthday &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">internal</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsNewsletterSubscribed &#123; <span class="keyword">get</span>; <span class="keyword">internal</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; EmailList &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;ShippingAddress&gt; ShippingAddresses &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> List&lt;ShippingAddress&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShippingAddress</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? ZipCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試程式"><a href="#測試程式" class="headerlink" title="測試程式"></a>測試程式</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;&#123;id:int&#125;&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetUserById</span>(<span class="params">[FromRoute] <span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> user = FakeUserRepository.GetUserById(id);</span><br><span class="line">        <span class="keyword">return</span> Ok(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpPatch(<span class="string">&quot;&#123;id:int&#125;&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">JsonPatch</span>(<span class="params">[FromRoute] <span class="built_in">int</span> id, [FromBody] JsonPatchDocument&lt;User&gt; command</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> user = FakeUserRepository.GetUserById(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> BadRequest();</span><br><span class="line"></span><br><span class="line">        command.ApplyTo(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Ok(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">FakeUserRepository</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> List&lt;User&gt; users = <span class="keyword">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> User</span><br><span class="line">        &#123;</span><br><span class="line">            Id = <span class="number">1</span>,</span><br><span class="line">            Email = <span class="string">&quot;pingchun.hung@gmail.com&quot;</span>,</span><br><span class="line">            Account = <span class="string">&quot;delia&quot;</span>,</span><br><span class="line">            Password = <span class="string">&quot;123&quot;</span>,</span><br><span class="line">            Birthday = <span class="keyword">new</span> DateTime(<span class="number">1996</span>, <span class="number">03</span>, <span class="number">31</span>),</span><br><span class="line">            FirstName = <span class="string">&quot;hung&quot;</span>,</span><br><span class="line">            LastName = <span class="string">&quot;pung chun&quot;</span>,</span><br><span class="line">            Age = <span class="number">27</span>,</span><br><span class="line">            IsNewsletterSubscribed = <span class="literal">true</span>,</span><br><span class="line">            EmailList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="string">&quot;pingchun.hung@gmail.com&quot;</span>, </span><br><span class="line">                <span class="string">&quot;jyun87123@gmail.com&quot;</span> </span><br><span class="line">            &#125;,</span><br><span class="line">            ShippingAddresses = <span class="keyword">new</span> List&lt;ShippingAddress&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> ShippingAddress &#123; ZipCode = <span class="string">&quot;001&quot;</span>, Address = <span class="string">&quot;台北市內湖區文德路87號&quot;</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> ShippingAddress &#123; ZipCode = <span class="string">&quot;002&quot;</span>, Address = <span class="string">&quot;台北市板橋區四維路123號&quot;</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User? GetUserById(<span class="built_in">int</span> id)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> users.FirstOrDefault(f =&gt; f.Id == id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原始資料"><a href="#原始資料" class="headerlink" title="原始資料"></a>原始資料</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;account&quot;</span><span class="punctuation">:</span> <span class="string">&quot;delia&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hung&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pung chun&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pingchun.hung@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1996-03-31T00:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isNewsletterSubscribed&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;emailList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;pingchun.hung@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;jyun87123@gmail.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shippingAddresses&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;zipCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;001&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台北市內湖區文德路87號&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;zipCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;002&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台北市板橋區四維路123號&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><ul><li>path 指向屬性：設定屬性值。</li><li>path 指向陣列元素：將新元素插入至 path 所指定的元素之前。</li><li>path 指定陣列位置 : &#x2F;shippingAddresses&#x2F;[2]</li><li>path 加到陣列結尾 : &#x2F;shippingAddresses&#x2F;-</li><li>如果 path 指向不存在的位置：<ol><li>修改動態物件：加入屬性。</li><li>修改靜態物件：要求失敗。</li></ol></li></ul><blockquote><p>Request</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="comment">//更新值</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;add&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;/firstName&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;hong&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//加到陣列[1]位置</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;add&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;/emailList/1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;delia85@gmail.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//加到陣列最後位置</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;add&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;/shippingAddresses/-&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;zipCode&quot;</span><span class="punctuation">:</span><span class="string">&quot;003&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Address&quot;</span><span class="punctuation">:</span><span class="string">&quot;高雄市苓雅區四維路871號&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><p>Response</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hong&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pung chun&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1996-03-31T00:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isNewsletterSubscribed&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;emailList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;pingchun.hung@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;delia85@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;jyun87123@gmail.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shippingAddresses&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;zipCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;001&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台北市內湖區文德路87號&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;zipCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;002&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台北市板橋區四維路123號&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;zipCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;003&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;高雄市苓雅區四維路871號&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h2><blockquote><p>Request</p></blockquote><ul><li>path 指向陣列元素：移除該元素。</li><li>path 指向屬性：<br>  修改動態物件：移除屬性。<br>  修改靜態物件：<ol><li>屬性可為 Null：將它設定為 Null。</li><li>屬性不可為 Null，則將它設定為 default<T>。</li></ol></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="comment">//更新為null</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;remove&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;/firstName&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//移除陣列[1]元素</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;remove&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;/emailList/1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//整個陣列更新為null</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;remove&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;/shippingAddresses&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><p>Response</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pung chun&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1996-03-31T00:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isNewsletterSubscribed&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;emailList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;pingchun.hung@gmail.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shippingAddresses&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ul><li>此作業在功能上與 remove 之後接著 add 相同。</li></ul><blockquote><p>Request</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span>  </span><br><span class="line">        <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;replace&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;/FirstName&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;hong&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;replace&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;/emailList&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;replace&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;/shippingAddresses/1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ZipCode&quot;</span><span class="punctuation">:</span><span class="string">&quot;087&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Address&quot;</span><span class="punctuation">:</span><span class="string">&quot;更新地址&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><p>Response</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hong&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pung chun&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1996-03-31T00:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isNewsletterSubscribed&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;emailList&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shippingAddresses&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;zipCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;001&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台北市內湖區文德路87號&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;zipCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;087&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;更新地址&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="移動"><a href="#移動" class="headerlink" title="移動"></a>移動</h2><ul><li>path 指向陣列元素：將 from 元素複製到 path 元素的位置，然後在 from 元素上執行 remove 作業。</li><li>path 指向屬性：將 from 屬性的值複製到 path 屬性，然後在 from 屬性上執行 remove 作業。</li><li>如果 path 指向不存在的屬性：<ol><li>更新靜態物件：要求失敗。</li><li>更新動態物件：將 from 屬性複製到 path 所指出的位置，然後在 from 屬性上執行 remove 作業。</li></ol></li></ul><blockquote><p>Request</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//將shippingAddresses[0]的Address賦值給LastName，並將Address改為null</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span> <span class="string">&quot;move&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/shippingAddresses/0/Address&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/LastName&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//將將shippingAddresses[1]與將shippingAddresses[0]交換</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span> <span class="string">&quot;move&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/ShippingAddresses/1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/ShippingAddresses/0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><p>Response</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hung&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台北市內湖區文德路87號&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1996-03-31T00:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isNewsletterSubscribed&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;emailList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;pingchun.hung@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;jyun87123@gmail.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shippingAddresses&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;zipCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;002&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台北市板橋區四維路123號&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;zipCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;001&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="複製"><a href="#複製" class="headerlink" title="複製"></a>複製</h2><ul><li>此作業在功能上與不含最後 remove 步驟的 move 作業相同。</li></ul><blockquote><p>Request</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//將shippingAddresses[0]的Address賦值給LastName</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span> <span class="string">&quot;move&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/shippingAddresses/0/Address&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/LastName&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//在 shippingAddresses[0] 前面插入 shippingAddresses[1] 的複本。</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span> <span class="string">&quot;copy&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/shippingAddresses/1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/shippingAddresses/0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><p>Response</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hung&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台北市內湖區文德路87號&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1996-03-31T00:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isNewsletterSubscribed&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;emailList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;pingchun.hung@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;jyun87123@gmail.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shippingAddresses&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;zipCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;002&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台北市板橋區四維路123號&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;zipCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;001&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;zipCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;002&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台北市板橋區四維路123號&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>如果 path 所指出位置上的值與 value 中所提供的值不同，則要求會失敗。 一個Test操作的請求內可以包含多個Test操作，其中任何一個Test操作驗證失敗，整個 PATCH 要求會失敗，</p><p>test 作業通常會用來防止在發生並行衝突時進行更新。</p><blockquote><p>Request</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/lastName&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Nancy&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;op&quot;</span><span class="punctuation">:</span> <span class="string">&quot;replace&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/firstName&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hong&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><p>Response</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Microsoft.AspNetCore.JsonPatch.Exceptions.JsonPatchException: &#x27;The current value &#x27;pung chun&#x27; at path &#x27;lastName&#x27; is not equal to the test value &#x27;Nancy&#x27;.&#x27;</span><br></pre></td></tr></table></figure><h2 id="使用AutoMapper轉換dto"><a href="#使用AutoMapper轉換dto" class="headerlink" title="使用AutoMapper轉換dto"></a>使用AutoMapper轉換dto</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//in Program.cs</span></span><br><span class="line">builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProfileMapping</span> : <span class="title">Profile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProfileMapping</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        CreateMap&lt;User, UpdateUserCommand&gt;().ReverseMap();</span><br><span class="line">        CreateMap&lt;ShippingAddress, UpdateUserShippingAddress&gt;().ReverseMap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpPatch(<span class="string">&quot;&#123;id:int&#125;&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">JsonPatch</span>(<span class="params">[FromRoute] <span class="built_in">int</span> id, [FromBody] JsonPatchDocument&lt;UpdateUserCommand&gt; command</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> user = FakeUserRepository.GetUserById(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> BadRequest();</span><br><span class="line"></span><br><span class="line">    UpdateUserCommand dto =  _mapper.Map&lt;UpdateUserCommand&gt;(user);</span><br><span class="line">    </span><br><span class="line">    command.ApplyTo(dto);</span><br><span class="line">    </span><br><span class="line">    _mapper.Map(dto, user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//saveChange..</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ok(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>如果沒有使用json patch，如上述範例中如果要更新FirstName的值，就要開一個更新FirstName的API，如果只想開一個API參數有User內所有屬性，就要有大量if判斷，而使用JSON Patch可以解決這個問題。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (keys.Contains(<span class="string">&quot;FirstName&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 更新 NaFirstNameme</span></span><br><span class="line">    entity.FirstName = command.FirstName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//......</span></span><br></pre></td></tr></table></figure><p>但由於json patch操作較為複雜，也會有非冪等性問題，可以使用較簡單的json merge patch來實現Patch。</p><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><p><a href="https://learn.microsoft.com/zh-tw/aspnet/core/web-api/jsonpatch?view=aspnetcore-7.0">https://learn.microsoft.com/zh-tw/aspnet/core/web-api/jsonpatch?view=aspnetcore-7.0</a></p><p><a href="https://inwedo.com/blog/when-not-use-json-patch-in-asp-net-core/">https://inwedo.com/blog/when-not-use-json-patch-in-asp-net-core/</a></p><p><a href="https://ithelp.ithome.com.tw/m/articles/10261369">https://ithelp.ithome.com.tw/m/articles/10261369</a></p><p><a href="https://www.ipshop.xyz/8591.html">https://www.ipshop.xyz/8591.html</a></p><p><a href="https://www.cnblogs.com/lwqlun/p/10433615.html">https://www.cnblogs.com/lwqlun/p/10433615.html</a></p>]]></content>
      
      
      <categories>
          
          <category> .NET </category>
          
          <category> Extension pack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
            <tag> 微服務 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EF Core如何使用Code-First，將繼承實體映射至資料庫</title>
      <link href="/2023/07/13/EFCore-Inheritance-CodeFirst/"/>
      <url>/2023/07/13/EFCore-Inheritance-CodeFirst/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近因為看了一些有關DDD領域驅動設計的文章，於是就很好奇，如何將充血模型映射至資料庫，其中物件的繼承關係複雜時，在資料庫會是甚麼樣的結構，通過EF做查詢SQL語法會如何做轉換，所以打算親自實驗看看。</p><h1 id="範例說明"><a href="#範例說明" class="headerlink" title="範例說明"></a>範例說明</h1><blockquote><p>Github範例程式<br><a href="https://github.com/DeliaHung/EFcore-Inheritance">https://github.com/DeliaHung/EFcore-Inheritance</a></p></blockquote><blockquote><p>本篇範例參考微軟官方文件做一點簡化調整<br><a href="https://learn.microsoft.com/zh-tw/ef/core/modeling/inheritance">https://learn.microsoft.com/zh-tw/ef/core/modeling/inheritance</a></p></blockquote><ul><li>新增Animal、Pet抽象類別。</li><li>Cat、Dog繼承Pet，Human繼承Animal。</li><li>Cat、Dog、Human有相同屬性 Species(物種)。</li><li>Cat、Dog、Human有各自不同屬性。</li><li>Cat、Dog都有自己的主人，Human也有多個寵物，屬於多對多關係。</li></ul><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/1.png" width=1200><h2 id="建立領域物件"><a href="#建立領域物件" class="headerlink" title="建立領域物件"></a>建立領域物件</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//動物類別(抽象)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Animal</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">string</span> Species &#123; <span class="keyword">get</span>; &#125; <span class="comment">//物種</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寵物類別(抽象)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Pet</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Pet</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? Vet &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ICollection&lt;Human&gt; Humans &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> List&lt;Human&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//貓貓</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Pet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> educationLevel</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        EducationLevel = educationLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> EducationLevel &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> Species =&gt; <span class="string">&quot;Felis catus&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        =&gt; <span class="string">$&quot;Cat &#x27;<span class="subst">&#123;Name&#125;</span>&#x27; (<span class="subst">&#123;Species&#125;</span>/<span class="subst">&#123;Id&#125;</span>) with education &#x27;<span class="subst">&#123;EducationLevel&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//狗勾</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Pet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> favoriteToy</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        FavoriteToy = favoriteToy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FavoriteToy &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> Species =&gt; <span class="string">&quot;Canis familiaris&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        =&gt; <span class="string">$&quot;Dog &#x27;<span class="subst">&#123;Name&#125;</span>&#x27; (<span class="subst">&#123;Species&#125;</span>/<span class="subst">&#123;Id&#125;</span>) with favorite toy &#x27;<span class="subst">&#123;FavoriteToy&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//人類</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Human</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> Species =&gt; <span class="string">&quot;Homo sapiens&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Animal? FavoriteAnimal &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> ICollection&lt;Pet&gt; Pets &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> List&lt;Pet&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        =&gt; <span class="string">$&quot;Human &#x27;<span class="subst">&#123;Name&#125;</span>&#x27; (<span class="subst">&#123;Species&#125;</span>/<span class="subst">&#123;Id&#125;</span>) with favorite animal &#x27;<span class="subst">&#123;FavoriteAnimal?.Name ?? <span class="string">&quot;&lt;Unknown&gt;&quot;</span>&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="建立DbContext"><a href="#建立DbContext" class="headerlink" title="建立DbContext"></a>建立DbContext</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Animal&gt; Animals &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Pet&gt; Pets &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Cat&gt; Cats &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Dog&gt; Dogs &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Human&gt; Humans &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//可準備不同資料庫</span></span><br><span class="line">        optionsBuilder.UseSqlServer(<span class="string">&quot;Data Source=DESKTOP-9F0J9EK;Initial Catalog=EFInheritanceTPT;Integrated Security=True;TrustServerCertificate=True&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">base</span>.OnModelCreating(builder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>為了方便測試及觀察產生的SQL語法，這邊使用LinqPad做實驗。</p><h3 id="LinqPad-Insert測試"><a href="#LinqPad-Insert測試" class="headerlink" title="LinqPad Insert測試"></a>LinqPad Insert測試</h3><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/2.png" width=1200><h3 id="LinqPad-Search測試"><a href="#LinqPad-Search測試" class="headerlink" title="LinqPad Search測試"></a>LinqPad Search測試</h3><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/3.png" width=1200><h1 id="Code-First-繼承映射的三種方式"><a href="#Code-First-繼承映射的三種方式" class="headerlink" title="Code-First 繼承映射的三種方式"></a>Code-First 繼承映射的三種方式</h1><h2 id="1-TPH-Table-per-Class-Hierarchy"><a href="#1-TPH-Table-per-Class-Hierarchy" class="headerlink" title="1.TPH(Table per Class Hierarchy)"></a>1.TPH(Table per Class Hierarchy)</h2><blockquote><p>EF Core預設</p></blockquote><p>一張表存放父類和子類的所有屬性，並自動生成識別器(discriminator)欄位，用來區分基類和各個子類的。優點是查詢速度快, 缺點是數據庫結構有點亂, 因為它把全部東西都塞進一個表, 會有很多nullable。</p><h3 id="資料表結構"><a href="#資料表結構" class="headerlink" title="資料表結構"></a>資料表結構</h3><p>預設產生出來的Discriminator，預設為string，存入時就是子類的名稱。</p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPH/1.png" width=400><h3 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h3><blockquote><p>使用Fluent API添加配置 在父類別加上UseTphMappingStrategy()。</p></blockquote><blockquote><p>識別器可以自己指定Type及Value，也可將識別器寫在父類屬性中，依照你的程式設計需求。</p></blockquote><blockquote><p>如果資料表有識別器無法識別的Type，會造成查詢時發生錯誤，以下例子是我自己去資料庫把Human的Type改成Type2。我們可以在設定加上IsComplete(false)，詳細設定請參考下面程式碼。</p></blockquote><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPH/7.png" width=400><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AnimalConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">Animal</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;Animal&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.HasKey(t =&gt; t.Id);</span><br><span class="line">        builder.Property(t =&gt; t.Id).UseIdentityColumn(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TPH(預設，所以可以不寫)</span></span><br><span class="line">        builder.UseTphMappingStrategy()</span><br><span class="line">            .HasDiscriminator().IsComplete(<span class="literal">false</span>);<span class="comment">//如果資料表有不存在Type，使用IsComplete(false)可防止查詢發生錯誤;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//識別器指定Type及Value。</span></span><br><span class="line">        builder.HasDiscriminator&lt;<span class="built_in">int</span>&gt;(<span class="string">&quot;AnimalType&quot;</span>)</span><br><span class="line">            .HasValue&lt;Cat&gt;(<span class="number">1</span>)</span><br><span class="line">            .HasValue&lt;Dog&gt;(<span class="number">2</span>)</span><br><span class="line">            .HasValue&lt;Human&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//將識別器寫在類別中</span></span><br><span class="line">        builder.HasDiscriminator(d =&gt; d.AnimalType)</span><br><span class="line">            .HasValue&lt;Cat&gt;(<span class="number">1</span>)</span><br><span class="line">            .HasValue&lt;Dog&gt;(<span class="number">2</span>)</span><br><span class="line">            .HasValue&lt;Human&gt;(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TPH寫入結果"><a href="#TPH寫入結果" class="headerlink" title="TPH寫入結果"></a>TPH寫入結果</h3><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPH/2.png" width=600><h3 id="TPH查詢測試"><a href="#TPH查詢測試" class="headerlink" title="TPH查詢測試"></a>TPH查詢測試</h3><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPH/3.png" width=1200><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPH/4.png" width=1200><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPH/5.png" width=1200><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPH/6.png" width=1200><h2 id="2-TPT-Table-per-Type"><a href="#2-TPT-Table-per-Type" class="headerlink" title="2.TPT(Table per Type)"></a>2.TPT(Table per Type)</h2><p>在TPT模式中，不管基底類別還是子類別通通都會建立一張表，這種模式下，每個表格都有一個主鍵，並且關聯的資料存放在各自對應的表格中，優點是數據庫結構好看, 不像 TPH 全部塞一個表, 又一堆 nullable. 缺點就是 query 慢. 因為每次 query 都需要 join。</p><h3 id="資料表結構-1"><a href="#資料表結構-1" class="headerlink" title="資料表結構"></a>資料表結構</h3><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPT/1.png" width=600><h3 id="設定-1"><a href="#設定-1" class="headerlink" title="設定"></a>設定</h3><blockquote><p>使用Fluent API添加配置，在父類別上加上UseTptMappingStrategy()，或是子類別全部指定Table名稱。</p></blockquote><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AnimalConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">Animal</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;Animal&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.HasKey(t =&gt; t.Id);</span><br><span class="line">        builder.Property(t =&gt; t.Id).UseIdentityColumn(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        builder.UseTptMappingStrategy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PetConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">Pet</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;Pet&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.ToTable(<span class="keyword">nameof</span>(Pet));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CatConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">Cat</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;Cat&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.ToTable(<span class="keyword">nameof</span>(Cat));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DogConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">Dog</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;Dog&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.ToTable(<span class="keyword">nameof</span>(Dog));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HumanConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">Human</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;Human&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.ToTable(<span class="keyword">nameof</span>(Human));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TPT寫入結果"><a href="#TPT寫入結果" class="headerlink" title="TPT寫入結果"></a>TPT寫入結果</h3><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPT/2.png" width=600><h3 id="TPT查詢測試"><a href="#TPT查詢測試" class="headerlink" title="TPT查詢測試"></a>TPT查詢測試</h3><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPT/3.png" width=1200><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPT/4.png" width=1200><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPT/5.png" width=1200><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPT/6.png" width=1200><h2 id="3-TPC-Table-per-Concrete-Class"><a href="#3-TPC-Table-per-Concrete-Class" class="headerlink" title="3.TPC(Table per Concrete Class)"></a>3.TPC(Table per Concrete Class)</h2><p>TPC是EF7.0才推出的，TPC 類似于 TPT 策略，不同資料表是針對階層中的每個類別所建立，但 <code>不會針對抽象類別建立資料表</code> ，基底類別中的屬性，會存在所有子類資料表裡面。 例如，每個資料表都有 Id、Name 。</p><h3 id="資料表結構-2"><a href="#資料表結構-2" class="headerlink" title="資料表結構"></a>資料表結構</h3><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPC/1.png" width=400><h3 id="設定-2"><a href="#設定-2" class="headerlink" title="設定"></a>設定</h3><blockquote><p>使用Fluent API添加配置，在父類別上加上UseTpcMappingStrategy()</p></blockquote><blockquote><p>注意父類別Id不可使用SQL自增流水號，會造成Id重複導致Insert錯誤。</p></blockquote><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AnimalConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">Animal</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;Animal&gt; builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.HasKey(t =&gt; t.Id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TPC</span></span><br><span class="line">        builder.UseTpcMappingStrategy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SEQUENCE"><a href="#SEQUENCE" class="headerlink" title="SEQUENCE"></a>SEQUENCE</h3><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPC/2.png" width=1200><blockquote><p>EF Core 要求所有實體都有唯一Key值，即使實體的類型不同也一樣，例如，Dog 不能有與 Cat 相同Key值，這表示無法使用簡單的 Identity 資料行。</p></blockquote><blockquote><p>SQLite 不支援序列或身分識別種子&#x2F;遞增，因此搭配 TPC 策略使用 SQLite 時，不支援產生整數索引鍵值。 不過，任何資料庫都支援用戶端產生或全域唯一索引鍵，例如 GUID，包括 SQLite。</p></blockquote><blockquote><p>如果不想用GUID，也可使用Hi-Lo模式。<br><a href="https://vladmihalcea.com/the-hilo-algorithm/">https://vladmihalcea.com/the-hilo-algorithm/</a><br><a href="https://learn.microsoft.com/zh-tw/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-implementation-entity-framework-core">https://learn.microsoft.com/zh-tw/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-implementation-entity-framework-core</a></p></blockquote><h3 id="TPC寫入結果"><a href="#TPC寫入結果" class="headerlink" title="TPC寫入結果"></a>TPC寫入結果</h3><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPC/3.png" width=400><h3 id="TPC查詢測試"><a href="#TPC查詢測試" class="headerlink" title="TPC查詢測試"></a>TPC查詢測試</h3><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPC/4.png" width=1200><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPC/5.png" width=1200><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPC/6.png" width=1200><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/TPC/7.png" width=1200><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>複習一下三種結構差異</p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/4.png" width=300><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/5.png" width=300><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/6.png" width=300><p>Table per Type (TPT):<br>TPT模式適合在需要對繼承層次結構進行頻繁更改和擴展的情況下。每個類別都有自己獨立的資料表，讓您可以獨立管理和操作每個類別的資料。這種模式較為正規化，因為每個資料表只包含特定類別的屬性。然而，這種模式可能導致較多的資料表格， <code>需要進行較多的 JOIN 操作</code> ，並且資料庫結構相對複雜，管理和維護成本較高。</p><p>Table per Hierarchy (TPH):<br>TPH模式適合在繼承層次結構相對穩定且不太會經常更改的情況下。整個繼承層次結構映射到單一資料表格，使用類型標誌（type discriminator）區分不同的類別。這種模式有 <code>較好的查詢效能和正規化特性</code> ，避免了較多的 JOIN 操作。然而，較大的資料表格可能包含一些不使用或為空的欄位，而且在繼承層次結構變動時，需要調整類型標誌。</p><p>以下為官方結論:</p><blockquote><p>總而言之，TPH 通常適用于大部分的應用程式，如果不需要 TPC，請勿新增複雜度。如果程式碼大部分會查詢許多類型的實體，例如針對基底類型查詢，TPH會是比較好的選擇。<br>換句話說，當您的程式碼大部分會查詢單一類型的實體，TPC 是一個良好的選擇。<br>只有在受限於外部因素的情況下，才使用 TPT。</p></blockquote><h2 id="效能比較"><a href="#效能比較" class="headerlink" title="效能比較"></a>效能比較</h2><p><a href="https://davecallan.com/entity-framework-7-inheritance-mapping-performance-benchmarks/">https://davecallan.com/entity-framework-7-inheritance-mapping-performance-benchmarks/</a></p><p>TPH優先選擇，如果欄位真的太多太臃腫，而且太多nullable不太直覺，可以考慮換成TPC ，尤其在業務需求通常都是指定查詢某個子類別,那麼可以優先考慮TPC.</p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p07/7.png" width=1200><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p><a href="https://learn.microsoft.com/zh-tw/ef/core/modeling/inheritance">https://learn.microsoft.com/zh-tw/ef/core/modeling/inheritance</a><br><a href="https://learn.microsoft.com/zh-tw/ef/core/performance/modeling-for-performance#inheritance-mapping">https://learn.microsoft.com/zh-tw/ef/core/performance/modeling-for-performance#inheritance-mapping</a><br><a href="https://www.entityframeworktutorial.net/code-first/inheritance-strategy-in-code-first.aspx">https://www.entityframeworktutorial.net/code-first/inheritance-strategy-in-code-first.aspx</a><br><a href="https://www.entityframeworktutorial.net/code-first/inheritance-strategy-in-code-first.aspx">https://www.entityframeworktutorial.net/code-first/inheritance-strategy-in-code-first.aspx</a><br><a href="https://www.cnblogs.com/dotnet261010/p/8018266.html">https://www.cnblogs.com/dotnet261010/p/8018266.html</a></p>]]></content>
      
      
      <categories>
          
          <category> .NET </category>
          
          <category> EF Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
            <tag> EF Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET core集成CAP框架，實現微服務最終一致性方案</title>
      <link href="/2023/07/08/Net-Core-CAP/"/>
      <url>/2023/07/08/Net-Core-CAP/</url>
      
        <content type="html"><![CDATA[<h1 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h1><p>提到分散式系統就一定要了解CAP定理，CAP簡單來說就是在分散式系統中不可能同時滿足 <code>一致性</code>、<code>可用性</code>、<code>分區容錯性</code>，以下為wiki百科的介紹。</p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0602.png" width=1200><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0603.png" width=400><ul><li>一致性（Consistency）：要求資料一致。</li><li>可用性（Availability）：要求即時非錯誤的回應。</li><li>分區容錯性（Partition tolerance）：服務之間通信出現故障，但不會影響整體系統運作。</li></ul><p>我們可以用簡單一點的方式理解這三點。</p><p><code>一致性</code> 和 <code>可用性</code> 應該站在”使用者的角度”去看。</p><p><code>分區容忍性</code> 則是”伺服器端”在遇到網路分區的問題時，選擇如何去影響使用者感知到的「一致性」和「可用性」。</p><p>分散式系統在斷網的情況下，2 台服務器變成了獨立網絡，彼此無法通信，這個情況就是分區。在分區的情況下，如果要保證數據一致性和可用性的話，那就滿足分區容錯性了，所以分散式系統P(分區容錯性)是一定存在的，就必須在C(一致性)及A(可用性)上做取捨。</p><h2 id="強一致性-v-s-最終一致性"><a href="#強一致性-v-s-最終一致性" class="headerlink" title="強一致性 v.s 最終一致性"></a>強一致性 v.s 最終一致性</h2><ul><li><p>強一致性(CP) : 適合處理訂單、支付、庫存、會員帳密…等，資料同步高度要求的任務。</p></li><li><p>最終一致性(AP) : 適合處理文章、會員簡介、個人訂單、發送簡訊、email…等，短時間不一致不影響使用。</p></li></ul><h1 id="Net-Core-CAP"><a href="#Net-Core-CAP" class="headerlink" title=".Net Core CAP"></a>.Net Core CAP</h1><h2 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h2><ul><li><p>使用Nuget包的方式提供，只需要簡單安裝不會對現有專案有任何衝突。</p></li><li><p>提供多種MQ、資料庫擴充。</p></li><li><p>共通的Publish及Receive接口，搭配.NET core DI容器註冊，可輕鬆發送至各種MQ，也可無痛抽換，與原代碼耦合性低。</p></li><li><p>具有消息持久化的功能，與本地事務一同提交，使用最終一致性的同時也有足夠的可靠性。</p></li><li><p>人性化的儀表板，方便查看事件進度，監聽事件數量，並可重新發送、消費事件。</p></li><li><p>7.0版本中提供完整的效能測試結果<br><a href="https://www.cnblogs.com/savorboard/p/cap-7-0.html">https://www.cnblogs.com/savorboard/p/cap-7-0.html</a></p></li><li><p>有詳細中文文件。</p></li><li><p>MIT協議開源，完全免費。</p></li></ul><h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0605.png" width=1200><ol><li>Service A會在資料庫建立消息表，用來記錄及跟踪消息內容及狀態。</li><li>Service A 接收到請求後，處理完業務邏輯，與即將發布消息一同寫入本地資料庫中。</li><li>成功寫入後將消息發送至MQ，如果消息發送失敗可依據資料庫中的消息表進行重發。</li><li>Service B 收到MQ中的消息先寫入資料庫中，當事件處理失敗時也可進行重新處理。</li><li>最終A、B事務最終達成一致。</li></ol><h2 id="官方網站"><a href="#官方網站" class="headerlink" title="官方網站"></a>官方網站</h2><p><a href="https://cap.dotnetcore.xyz/">https://cap.dotnetcore.xyz/</a></p><h2 id="Github範例"><a href="#Github範例" class="headerlink" title="Github範例"></a>Github範例</h2><p><a href="https://github.com/DeliaHung/dotnet-cap">https://github.com/DeliaHung/dotnet-cap</a></p><p>模擬成立訂單後發送Email通知，建立兩個API專案分別為OrderService、MessageService</p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0606.png" width=500><h2 id="使用docker啟動RabbitMQ"><a href="#使用docker啟動RabbitMQ" class="headerlink" title="使用docker啟動RabbitMQ"></a>使用docker啟動RabbitMQ</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.12-management</span><br></pre></td></tr></table></figure><p>進入rabbitmq網頁<br><a href="http://localhost:15672/">http://localhost:15672</a></p><p>預設帳號密碼皆為guest</p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0604.png" width=1000><h2 id="下載CAP套件"><a href="#下載CAP套件" class="headerlink" title="下載CAP套件"></a>下載CAP套件</h2><p>主要CAP庫</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PM&gt; Install-Package DotNetCore.CAP</span><br></pre></td></tr></table></figure><p>官方提供了非常多種Message Queue</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PM&gt; Install-Package DotNetCore.CAP.Kafka</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.RabbitMQ</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.AzureServiceBus</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.AmazonSQS</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.NATS</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.RedisStreams</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.Pulsar</span><br></pre></td></tr></table></figure><p>也提供了相關的數據持久化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PM&gt; Install-Package DotNetCore.CAP.SqlServer</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.MySql</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.PostgreSql</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.MongoDB </span><br></pre></td></tr></table></figure><h2 id="註冊CAP"><a href="#註冊CAP" class="headerlink" title="註冊CAP"></a>註冊CAP</h2><p>我們使用RabbitMQ + Sql Server來示範，在program做註冊，其他細節設定官方網站都有介紹，非常清楚。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddCap(x =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    x.UseRabbitMQ(opt =&gt; &#123;</span><br><span class="line">        opt.HostName = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">        opt.Port = <span class="number">15672</span>;</span><br><span class="line">        opt.UserName = <span class="string">&quot;guest&quot;</span>;</span><br><span class="line">        opt.Password = <span class="string">&quot;guest&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    x.UseSqlServer(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.ConnectionString = <span class="string">&quot;Data Source=.;Initial Catalog=CAPdemo;Integrated Security=True;TrustServerCertificate=true&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="發送-Publish"><a href="#發送-Publish" class="headerlink" title="發送(Publish)"></a>發送(Publish)</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">HttpPost(Name = <span class="string">&quot;CreateOrder&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateOrder</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> tran = _dbContext.Database.BeginTransaction(_capPublisher);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Order order = <span class="keyword">new</span> Order();</span><br><span class="line">            order.OrderNumber = <span class="string">&quot;2023010100001&quot;</span>;</span><br><span class="line">            <span class="comment">//建立訂單完成</span></span><br><span class="line">            _dbContext.Orders.Add(order);</span><br><span class="line">            _dbContext.SaveChanges();</span><br><span class="line">            SendSmsDto sendSmsDto = <span class="keyword">new</span>() &#123; PhoneNumber = <span class="string">&quot;0987887887&quot;</span>, Content = <span class="string">&quot;使用.NET core CAP 實現微服務事件發送&quot;</span> &#125;;</span><br><span class="line">            _capPublisher.Publish(<span class="string">&quot;SendSms&quot;</span>, sendSmsDto);</span><br><span class="line">            tran.Commit();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            tran.Rollback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">SendSmsDto</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> PhoneNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>事件持久化</li></ul><p>發送完成會發現CAP幫你建了兩個資料表，就照字面上的意思一樣，一個是發佈者(cap.Published)、一個是消費者(cap.Received)。</p><p>cap.Publish內會將事件訊息持久化，目的是可以保證當Message Queue傳送異常或者網絡錯誤時候事件沒有丟失。 為了保證這種機制的可靠性，CAP「建議使用和業務代碼相同的資料庫」事務來保證業務操作和CAP的消息在持久化的過程中是強一致的。也就是說與業務代碼一同包進Transastion事務。</p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0607.png" width=800><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0608.png" width=700><p>RabbitMQ後台也能看到發送的內容</p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0610.png" width=700><h2 id="監聽-Subscribe"><a href="#監聽-Subscribe" class="headerlink" title="監聽(Subscribe)"></a>監聽(Subscribe)</h2><ol><li>In Controller Action</li></ol><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">NonAction</span>]</span><br><span class="line">[<span class="meta">CapSubscribe(<span class="string">&quot;SendSms&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendSms</span>(<span class="params">SendSmsDto dto, [FromCap] CapHeader header</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(dto.ToString());</span><br><span class="line">    Console.WriteLine(JsonSerializer.Serialize(header));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0611.png" width=700><ol start="2"><li>In Business Logic Service</li></ol><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISmsService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params">SendSmsDto dto, [FromCap] CapHeader header</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SmsService</span> : <span class="title">ISmsService</span>, <span class="title">ICapSubscribe</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">CapSubscribe(<span class="string">&quot;SendSms&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params">SendSmsDto dto, [FromCap] CapHeader header</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//業務代碼...</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddTransient&lt;ISmsService, SmsService&gt;();</span><br><span class="line"><span class="comment">//CAP</span></span><br><span class="line">builder.Services.AddCap(x =&gt;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0612.png" width=700><p>Sql Server的cap.Received一樣會有消費紀錄，這邊特地用了兩個不同的DB模擬微服務環境<br><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0613.png" width=700></p><h2 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h2><p>安裝</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PM&gt; Install-Package DotNetCore.Dashboard</span><br></pre></td></tr></table></figure><p>自 5.1.0 開始，CAP Dashboard 授權預設使用 ASP.NET Core 的方式，不再提供自定義授權篩檢程式。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddCap(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//options.UseDashboard();</span></span><br><span class="line">    options.UseDashboard(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//加上JWT就必須要有Bearer token才能進入頁面</span></span><br><span class="line">        x.UseAuth = <span class="literal">true</span>;</span><br><span class="line">        x.DefaultAuthenticationScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class="line">        x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0614.png" width=700><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0615.png" width=700><h2 id="消息重發設定"><a href="#消息重發設定" class="headerlink" title="消息重發設定"></a>消息重發設定</h2><p>1、 發送重試<br>第一次重試次數為 3，4分鐘后以後每分鐘重試一次，進行次數 +1，當總次數達到50次后，CAP將不對其進行重試。</p><p>2、 消費重試<br>重試策略和上面的 發送重試 是相同的。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自訂義</span></span><br><span class="line">builder.Services.AddCap(x =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    x.FailedRetryCount = <span class="number">10</span>;<span class="comment">//重試次數(寫入MQ失敗)</span></span><br><span class="line">    x.FailedRetryInterval = <span class="number">30</span>;<span class="comment">//重式間隔頻率</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="失敗處理"><a href="#失敗處理" class="headerlink" title="失敗處理"></a>失敗處理</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddCap(x =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    x.FailedThresholdCallback = failed =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> logger = failed.ServiceProvider.GetService&lt;ILogger&gt;();</span><br><span class="line">        logger.LogError(<span class="string">$@&quot;【MqType:<span class="subst">&#123;failed.MessageType&#125;</span>失敗】【重試了<span class="subst">&#123;option.FailedRetryCount&#125;</span>次】,【消息名稱:<span class="subst">&#123;failed.Message.GetName()&#125;</span>】&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="數據清理"><a href="#數據清理" class="headerlink" title="數據清理"></a>數據清理</h2><p>資料庫消息表中具有一個 ExpiresAt 欄位表示消息的過期時間，當消息發送成功或者消費成功后，CAP會將消息狀態為 Successed 的 ExpiresAt 設置為 1天 後過期，會將消息狀態為 Failed 的 ExpiresAt 設置為 15天 後過期。</p><p>CAP 預設情況下會每隔<strong>5分鐘</strong>將消息表的數據進行清理刪除，避免數據量過多導致性能的降低。 清理規則為 ExpiresAt 不為空並且小於當前時間的數據。 也就是說狀態為Failed的消息（正常情況他們已經被重試了 50 次），如果你15天沒有人工介入處理，同樣會被清理掉。 </p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自訂義</span></span><br><span class="line">builder.Services.AddCap(x =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    x.FailedMessageExpiredAfter = <span class="number">300</span>;<span class="comment">//失敗消息的过期时间（秒）</span></span><br><span class="line">    x.SucceedMessageExpiredAfter = <span class="number">500</span>;<span class="comment">//成功消息的过期时间（秒）</span></span><br><span class="line">    x.CollectorCleaningInterval = <span class="number">300</span>; <span class="comment">//刪除已經過期消息的時間間隔</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命名設定"><a href="#命名設定" class="headerlink" title="命名設定"></a>命名設定</h2><ul><li><p>GroupNamePrefix : 為訂閱Group統一加上前綴，以 ‘.’ 做區隔。 </p></li><li><p>TopicNamePrefix : 為Topic統一加上前綴，以 ‘.’ 做區隔。 </p></li><li><p>Version : 版本，用於給消息指定版本來隔離不同版本服務的消息。</p></li><li><p>DefaultGroupName : 預設Group名稱。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在 RabbitMQ 中映射到 Queue Names。</span><br><span class="line">在 Apache Kafka 中映射到 Consumer Group Id。</span><br><span class="line">在 Azure Service Bus 中映射到 Subscription Name。</span><br><span class="line">在 NATS 中映射到 Queue Group Name. 在 Redis Streams 中映射到 Consumer Group.</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddCap(x =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    x.DefaultGroupName = <span class="string">&quot;dev&quot;</span>;</span><br><span class="line">    x.TopicNamePrefix = <span class="string">&quot;dev&quot;</span>;</span><br><span class="line">    x.GroupNamePrefix = <span class="string">&quot;dev&quot;</span>;</span><br><span class="line">    x.Version = <span class="string">&quot;v3&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="採坑日記"><a href="#採坑日記" class="headerlink" title="採坑日記"></a>採坑日記</h2><p>如果生產者不是使用CAP發送，會沒有CAP預設的Header訊息，導致消費者(使用CAP)，Header解析時發生錯誤。當初因為公司舊專案不是.net core所以只能單純發出事件，用的是kafka，也因為踩了這個坑才知道原來kafka有Header訊息。</p><ol><li>可以在生產者發送事件時手動加上CAP要求的Header。<br>官方說明 : <a href="https://cap.dotnetcore.xyz/user-guide/zh/cap/messaging/">https://cap.dotnetcore.xyz/user-guide/zh/cap/messaging/</a></li></ol><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p06/p0616.png" width=700><ol start="2"><li>或是在消費者專案內CustomHeaders解決。<br>官方說明 : <a href="https://cap.dotnetcore.xyz/user-guide/zh/transport/rabbitmq/">https://cap.dotnetcore.xyz/user-guide/zh/transport/rabbitmq/</a></li></ol><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddCap(x =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//kafka</span></span><br><span class="line">    x.UseKafka(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        x.Servers = kafkaConn;</span><br><span class="line">        x.CustomHeaders = kafkaResult =&gt; <span class="keyword">new</span> List&lt;KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;(Headers.MessageId, SnowflakeId.Default().NextId().ToString()),</span><br><span class="line">            <span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;(Headers.MessageName, kafkaResult.Topic),</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//RabbitMQ</span></span><br><span class="line">    x.UseRabbitMQ(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        x.CustomHeaders = e =&gt; <span class="keyword">new</span> List&lt;KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;(Headers.MessageId, SnowflakeId.Default().NextId().ToString()),</span><br><span class="line">            <span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;(Headers.MessageName, e.RoutingKey),</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> .NET </category>
          
          <category> Extension pack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
            <tag> 微服務 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EF Core 併發處理，樂觀鎖與悲觀鎖</title>
      <link href="/2023/06/21/EFCore-Concurrency/"/>
      <url>/2023/06/21/EFCore-Concurrency/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>寫這篇文章的原因，是小妹幫公司做週年慶專案，實作搶優惠券小遊戲，前幾年的週年慶完全沒有做任何防止超賣處理，而我當時只知道C#的單機鎖 <strong>(lock)</strong> 語法，加上lock後在單機環境不管怎麼壓力測試都正常，上線卻還是發生了超賣問題，而且是最大獎啊!!!! 最後找出問題，原來是Azure Appservice Instance開到5台導致單機鎖沒用。</p><p>當時很緊急的找到Redis Redlock快速套用解決了問題，但似乎會有效能問題，好險活動瞬間流量沒有到太高，Redis沒有被打爆，另外也有上網問一些搶購解法，有大神問我為何DB沒鎖，才知道有樂觀鎖、悲觀鎖這個東西…真是丟臉，不過當下沒實際實驗過所以不敢用，現在就來親自實驗一次~</p><h1 id="SQL併發模擬"><a href="#SQL併發模擬" class="headerlink" title="SQL併發模擬"></a>SQL併發模擬</h1><p>執行以下測試資料表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Stock</span><br><span class="line">(</span><br><span class="line">Id <span class="type">INT</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">ProductId <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">Quantity <span class="type">INT</span>,</span><br><span class="line">UpdateTime DATETIME</span><br><span class="line">)</span><br><span class="line">Go</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Stock <span class="keyword">VALUES</span>(<span class="string">&#x27;P01&#x27;</span>,<span class="number">100</span>,GETDATE())</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Stock <span class="keyword">VALUES</span>(<span class="string">&#x27;P02&#x27;</span>,<span class="number">100</span>,GETDATE())</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Stock <span class="keyword">VALUES</span>(<span class="string">&#x27;P03&#x27;</span>,<span class="number">100</span>,GETDATE())</span><br></pre></td></tr></table></figure><p>開啟兩個查詢介面，使用最一般的SQL語法更新P01庫存，並將其中一筆SQL延遲時間設為5秒，並且先執行有延遲的SQL，再馬上執行沒延遲的SQL。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@quantity</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@productId</span> <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> TRAN</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@productId</span> <span class="operator">=</span> <span class="string">&#x27;P01&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@quantity</span> <span class="operator">=</span> Quantity <span class="keyword">FROM</span> STOCK <span class="keyword">WHERE</span> ProductId <span class="operator">=</span> <span class="variable">@productId</span></span><br><span class="line">WAITFOR DELAY <span class="string">&#x27;00:00:05&#x27;</span></span><br><span class="line"><span class="keyword">UPDATE</span> STOCK <span class="keyword">SET</span> Quantity <span class="operator">=</span> <span class="variable">@quantity</span> <span class="number">-1</span> <span class="keyword">WHERE</span> ProductId <span class="operator">=</span> <span class="variable">@productId</span></span><br><span class="line"><span class="keyword">COMMIT</span> TRAN</span><br></pre></td></tr></table></figure><p>結果發現庫存還是99，因為第二筆SQL讀進來的是100，所以兩筆執行UPDATE都是更新為99。<br><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0301.png"></p><h2 id="樂觀鎖-Optimistic-Concurrency"><a href="#樂觀鎖-Optimistic-Concurrency" class="headerlink" title="樂觀鎖 (Optimistic Concurrency)"></a>樂觀鎖 (Optimistic Concurrency)</h2><p>允許多個SQL來操作 table；但樂觀並不代表不負責，通常會在 table 中增加一個 version 的欄位來做更新的確認。</p><p>首先給表加上一個timestamp欄位</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Stock <span class="keyword">ADD</span> TimeFlag <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p>SQL語法加上TimeFlag當作版本號並加上where條件</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@quantity</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@productId</span> <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@flag</span> <span class="type">timestamp</span> <span class="comment">--加上timeStamp當作版本號</span></span><br><span class="line"><span class="keyword">BEGIN</span> TRAN</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@productId</span> <span class="operator">=</span> <span class="string">&#x27;P01&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@quantity</span> <span class="operator">=</span> Quantity , <span class="variable">@flag</span> <span class="operator">=</span> TimeFlag <span class="keyword">FROM</span> STOCK <span class="keyword">WHERE</span> ProductId <span class="operator">=</span> <span class="variable">@productId</span></span><br><span class="line">WAITFOR DELAY <span class="string">&#x27;00:00:10&#x27;</span></span><br><span class="line"><span class="keyword">UPDATE</span> STOCK <span class="keyword">SET</span> Quantity <span class="operator">=</span> <span class="variable">@quantity</span> <span class="number">-1</span> </span><br><span class="line"><span class="keyword">WHERE</span> ProductId <span class="operator">=</span> <span class="variable">@productId</span> <span class="keyword">AND</span> TimeFlag <span class="operator">=</span> <span class="variable">@flag</span> <span class="comment">--多一個timeStamp條件</span></span><br><span class="line"><span class="keyword">COMMIT</span> TRAN</span><br></pre></td></tr></table></figure><p>結果發現延遲執行SQL執行失敗<br><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0302.png"></p><h2 id="悲觀鎖-Pessimistic-Concurrency"><a href="#悲觀鎖-Pessimistic-Concurrency" class="headerlink" title="悲觀鎖 (Pessimistic Concurrency)"></a>悲觀鎖 (Pessimistic Concurrency)</h2><p>當一個SQL執行獲得悲觀鎖後，其他的 SQL無法對這個 data 進行修改，直到悲觀鎖被釋放後才能執行。</p><p>在SQL的SELECT後面加上Update Locks : WITH(UPDLOCK)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@quantity</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@productId</span> <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> TRAN</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@productId</span> <span class="operator">=</span> <span class="string">&#x27;P01&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@quantity</span> <span class="operator">=</span> Quantity <span class="keyword">FROM</span> STOCK <span class="keyword">WITH</span>(UPDLOCK) <span class="keyword">WHERE</span> ProductId <span class="operator">=</span> <span class="variable">@productId</span></span><br><span class="line">WAITFOR DELAY <span class="string">&#x27;00:00:10&#x27;</span></span><br><span class="line"><span class="keyword">UPDATE</span> STOCK <span class="keyword">SET</span> Quantity <span class="operator">=</span> <span class="variable">@quantity</span> <span class="number">-1</span> <span class="keyword">WHERE</span> ProductId <span class="operator">=</span> <span class="variable">@productId</span></span><br><span class="line"><span class="keyword">COMMIT</span> TRAN</span><br></pre></td></tr></table></figure><p>執行延遲SQL再執行其他SQL時會等待鎖釋放，所以結果一定正確。<br><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0303.png"></p><hr><h1 id="使用EF-Core-處理併發問題"><a href="#使用EF-Core-處理併發問題" class="headerlink" title="使用EF Core 處理併發問題"></a>使用EF Core 處理併發問題</h1><blockquote><p>Github範例程式<br><a href="https://github.com/DeliaHung/EFcore-Concurrency">https://github.com/DeliaHung/EFcore-Concurrency</a></p></blockquote><blockquote><p>EF core 文件<br><a href="https://www.learnentityframeworkcore.com/configuration/fluent-api/isconcurrencytoken-method">https://www.learnentityframeworkcore.com/configuration/fluent-api/isconcurrencytoken-method</a></p></blockquote><blockquote><p>Microsoft 文件<br><a href="https://learn.microsoft.com/zh-tw/ef/core/saving/concurrency?tabs=data-annotations">https://learn.microsoft.com/zh-tw/ef/core/saving/concurrency?tabs=data-annotations</a></p></blockquote><h2 id="模擬併發"><a href="#模擬併發" class="headerlink" title="模擬併發"></a>模擬併發</h2><p>建立ConsoleApp專案，建立測試用的Entity，模擬庫存控制。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EFstock</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> ProductId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Quantity &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EFstockConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">EFstock</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;EFstock&gt; builder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">builder.HasKey(t =&gt; t.Id);</span><br><span class="line">builder.Property(t =&gt; t.Id).UseIdentityColumn(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立Dbcontext，可設定將SQL結果輸出至console視窗</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> DbSet&lt;EFstock&gt; EFstocks &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">optionsBuilder.UseSqlServer(<span class="string">&quot;Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=testLock;Integrated Security=True;Connect Timeout=30;Encrypt=False;Trust Server Certificate=False;Application Intent=ReadWrite;Multi Subnet Failover=False&quot;</span>)</span><br><span class="line">.LogTo((message) =&gt; Console.WriteLine(<span class="string">$&quot;【SQL Command : <span class="subst">&#123;message&#125;</span> \r\n&quot;</span>), LogLevel.Information);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder builder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">builder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());</span><br><span class="line"></span><br><span class="line"><span class="keyword">base</span>.OnModelCreating(builder);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>開啟nuget控制台，使用code first產生資料表，<br>成功產出測試資料表，並新增測試資料</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">add-migration &quot;first&quot;</span><br><span class="line">update-database</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> [EFstocks] <span class="keyword">values</span>(<span class="string">&#x27;P01&#x27;</span>,<span class="number">110</span>)</span><br></pre></td></tr></table></figure><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0304.png" width=500><p>program.cs測試程式如下，開啟10個線程，每個線程執行更新10次，預期庫存會剩下10個。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> EFcoreConcurrency;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tasks = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> task = Task.Run(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            UpdateStock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    tasks.Add(task);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Task.WaitAll(tasks.ToArray());</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (Task t <span class="keyword">in</span> tasks)</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Task &#123;0&#125; Status: &#123;1&#125;&quot;</span>, t.Id, t.Status);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Number of files read: &#123;0&#125;&quot;</span>, tasks.Count);</span><br><span class="line"></span><br><span class="line"><span class="comment">//一般更新庫存</span></span><br><span class="line"><span class="function"><span class="keyword">async</span> Task <span class="title">UpdateStock</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> dbContext = <span class="keyword">new</span> TestContext();</span><br><span class="line">    <span class="keyword">var</span> p = dbContext.EFstocks.FirstOrDefault(f =&gt; f.ProductId == <span class="string">&quot;P01&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (p.Quantity &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;【<span class="subst">&#123;Task.CurrentId&#125;</span>】【庫存不足】&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p.Quantity -= <span class="number">1</span>;</span><br><span class="line">    dbContext.SaveChanges();</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;【<span class="subst">&#123;Task.CurrentId&#125;</span>】【成功下單】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>驚! 全部 <strong>成功下單</strong> ，但數量卻<strong>不是預期的剩下10個!!</strong></p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0306.png" width=600><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0305.png" width=600><h1 id="EF-Core-樂觀鎖測試"><a href="#EF-Core-樂觀鎖測試" class="headerlink" title="EF Core 樂觀鎖測試"></a>EF Core 樂觀鎖測試</h1><h2 id="方案一-併發令牌"><a href="#方案一-併發令牌" class="headerlink" title="方案一:併發令牌"></a>方案一:併發令牌</h2><p>設定方式</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EFstock</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> ProductId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">ConcurrencyCheck</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Quantity &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可使用Fluent API 設定</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EFstockConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">EFstock</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;EFstock&gt; builder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">builder.HasKey(t =&gt; t.Id);</span><br><span class="line">builder.Property(t =&gt; t.Id).UseIdentityColumn(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fluent API配置</span></span><br><span class="line">builder.Property(t =&gt; t.Quantity).IsConcurrencyToken();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打開TextContext的LogTo方法，查看輸出視窗的SQL Command，發現where條件多了 <strong>Quantity &#x3D; @p2</strong></p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0308.png" width=700><p>並且主程式跳出了DbUpdateConcurrencyException。</p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0307.png" width=700><h2 id="衝突處理"><a href="#衝突處理" class="headerlink" title="衝突處理"></a>衝突處理</h2><p>捕捉DbUpdateConcurrencyException，並重新執行更新直到成功。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> EFcoreConcurrency;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tasks = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> task = Task.Run(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            UpdateStockWithOptimistic();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    tasks.Add(task);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Task.WaitAll(tasks.ToArray());</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (Task t <span class="keyword">in</span> tasks)</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Task &#123;0&#125; Status: &#123;1&#125;&quot;</span>, t.Id, t.Status);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Number of files read: &#123;0&#125;&quot;</span>, tasks.Count);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//樂觀鎖</span></span><br><span class="line"><span class="function"><span class="keyword">async</span> Task <span class="title">UpdateStockWithOptimistic</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> saved = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!saved)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> dbContext = <span class="keyword">new</span> TestContext();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> p = dbContext.EFstocks.FirstOrDefault(f =&gt; f.ProductId == <span class="string">&quot;P01&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p.Quantity &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;【<span class="subst">&#123;Task.CurrentId&#125;</span>】【庫存不足】&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p.Quantity -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            dbContext.SaveChanges();</span><br><span class="line"></span><br><span class="line">            saved = <span class="literal">true</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;【<span class="subst">&#123;Task.CurrentId&#125;</span>】【成功下單】&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (DbUpdateConcurrencyException ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;【<span class="subst">&#123;Task.CurrentId&#125;</span>】【發生衝突!!!!!】&quot;</span>);</span><br><span class="line">            Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>庫存控制成功</strong>，剛好剩10個。</p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0312.png" width=800><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0309.png" width=500><h2 id="方案二-RowVersion"><a href="#方案二-RowVersion" class="headerlink" title="方案二:RowVersion"></a>方案二:RowVersion</h2><p>設定方式</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EFstock</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> ProductId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Quantity &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Timestamp</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">byte</span>[] Version &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可使用Fluent API 設定</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EFstockConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">EFstock</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;EFstock&gt; builder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">builder.HasKey(t =&gt; t.Id);</span><br><span class="line">builder.Property(t =&gt; t.Id).UseIdentityColumn(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fluent API配置</span></span><br><span class="line">builder.Property(x =&gt; x.Version).IsRowVersion();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>記得重新執行Migration</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">add-migration &quot;add Version&quot;</span><br><span class="line">update-database</span><br></pre></td></tr></table></figure><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0311.png" width=500><p>執行剛剛的主程式，查看輸出視窗的SQL Command，發現where條件多了<strong>Version &#x3D; @p2</strong>，庫存結果與ConcurrencyToken一樣正確。</p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0310.png" width=800><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0309.png" width=500><h1 id="EF-Core-悲觀鎖測試"><a href="#EF-Core-悲觀鎖測試" class="headerlink" title="EF Core 悲觀鎖測試"></a>EF Core 悲觀鎖測試</h1><p>加上悲觀鎖後，每一個程序運行到 FromSqlRaw 這一行時都要先看看鎖是否佔用，所以不會發生DbUpdateConcurrencyException，會直到鎖釋放往下執行。悲觀策略對於並發性能的影響是很大的，如果請求很多，那麼就需要一直排隊，並且還可能有死鎖問題。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> EFcoreConcurrency;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tasks = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> task = Task.Run(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            UpdateStockWithPessimistic();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    tasks.Add(task);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Task.WaitAll(tasks.ToArray());</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (Task t <span class="keyword">in</span> tasks)</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Task &#123;0&#125; Status: &#123;1&#125;&quot;</span>, t.Id, t.Status);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Number of files read: &#123;0&#125;&quot;</span>, tasks.Count);</span><br><span class="line"></span><br><span class="line"><span class="comment">//悲觀鎖</span></span><br><span class="line"><span class="function"><span class="keyword">async</span> Task <span class="title">UpdateStockWithPessimistic</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> saved = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!saved)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> dbContext = <span class="keyword">new</span> TestContext();</span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> tran = dbContext.Database.BeginTransaction();</span><br><span class="line">            <span class="keyword">var</span> p = dbContext.EFstocks.FromSqlRaw(<span class="string">&quot;select * from EFstocks with(updlock) where ProductId = &#x27;P01&#x27;&quot;</span>).FirstOrDefault();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p.Quantity &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;【<span class="subst">&#123;Task.CurrentId&#125;</span>】【庫存不足】&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            p.Quantity -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result = dbContext.SaveChanges();</span><br><span class="line">            tran.Commit();</span><br><span class="line"></span><br><span class="line">            saved = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;【<span class="subst">&#123;Task.CurrentId&#125;</span>】【成功下單】&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (DbUpdateConcurrencyException ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;【<span class="subst">&#123;Task.CurrentId&#125;</span>】【發生衝突!!!!!】&quot;</span>);</span><br><span class="line">            Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>沒有衝突，每筆更新都等待鎖釋放完畢才往下執行，庫存正確。</p><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0313.png" width=800><img src="https://s3-tpe-01.russel053.com/delia/delia_tech_hexo/postImg/p03/p0309.png" width=500><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>這篇算是自己第一次寫得比較像樣的文章，但是對鎖的很多知識還沒有太深的了解，關於lock類型有好多種，例如Shared Locks (s)、Update Locks (U)、Exclusive Locks (X)…等等的差異，還有最近遇到批次大量更新庫存的方法，目前自己想到的方案是Redis控制庫存 + Message Queue走最終一致性，不曉得是不是合理的方案，之後會再深入研究。</p>]]></content>
      
      
      <categories>
          
          <category> .NET </category>
          
          <category> EF Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
            <tag> EF Core </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
